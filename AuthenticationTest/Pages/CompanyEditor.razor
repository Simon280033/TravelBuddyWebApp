@page "/CompanyEditor"
@using AuthenticationTest.Data.Entities
@using AuthenticationTest.Data

@inject Company TheCompany
@inject AuthenticationStateProvider auth
@inject IDAOFetcher _daoFetcher
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<div class="container">
    <h2>Company details</h2>
</div>

<div style="text-align:center; background-color: #e8e8e8; padding: 15px; border-radius: 10px; margin: 10px;">
    <div style="margin:auto;">
        <div>
            <label><b>Sight name: </b></label>
        </div>
        <input placeholder="Company name..." @bind-value="companyName">
    </div>

    <div style="margin:auto;">
        <div>
            <label><b>Address: </b></label>
        </div>
        <input placeholder="Company address..." @bind-value="companyAddress">
    </div>
    
    <div style="margin:auto;">
        <div>
            <label><b>E-mail: </b></label>
        </div>
        <input placeholder="E-mail..." readonly disabled="true" @bind-value="companyEmail">
    </div>
    
    <div style="margin:auto;">
        <div>
            <label><b>Phone: </b></label>
        </div>
        <input placeholder="Phone number..." type="number" @bind-value="companyPhone">
    </div>

    <div style="margin:auto;">
        <div style="color:red">@ErrorMessage</div>
    </div>
    
    <RadzenButton style="margin-top: 10px;" Click=@(args => SaveCompanyInfo()) Text="Save Company info" />
</div>

@code {
    private bool CompanyTiedToUser = false;
    private string companyName = "";
    private string companyAddress = "";
    private string companyEmail = "";
    private string companyPhone = "";

    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        IfNotAuthorized();
        
        SetEmailFromUser();
        
        // We check if company details are tied to user
        CompanyTiedToUser = _daoFetcher.CompanyDao().userTiedToCompany(auth.GetAuthenticationStateAsync().Result.User.Identity.Name);
        
        if (CompanyTiedToUser)
        {
            Company tempCompany = _daoFetcher.CompanyDao().getCompanyForUserById(auth.GetAuthenticationStateAsync().Result.User.Identity.Name);
            companyName = tempCompany.name;
            companyAddress = tempCompany.address;
            companyPhone = tempCompany.phone;
        }
    }
    
    private async void IfNotAuthorized()
    {
    // We check if the user is logged in
        bool isAuthenticated = auth.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
    // If not authenticated, we redirect to main page
            await JsRuntime.InvokeVoidAsync("alert", "NOTICE: This page is only for registered users! Please sign in or register.");
            NavManager.NavigateTo("/");
        }
    }

    private void SetEmailFromUser()
    {
        companyEmail = auth.GetAuthenticationStateAsync().Result.User.Identity.Name;
    }

    private bool AllFilled()
    {
        bool allFilled = true;

        if (companyName.Length < 3)
        {
            return false;
        }

        if (companyAddress.Length < 5)
        {
            return false;
        }

        if (companyPhone.Length < 4) // Shortest possible phone number
        {
            return false;
        }

        return allFilled;
    }

    private async void CreateAndTieToUser()
    {
        Console.WriteLine("All filled! Attempting to save in DB...");
    // We attempt to save in DB
        Company company = new Company
        {
            id = 0,
            address = companyAddress,
            email = companyEmail,
            name = companyName,
            phone = companyPhone
        };

        try
        {
            _daoFetcher.CompanyDao().CreateCompany(company);
            _daoFetcher.CompanyDao().TieCompanyToUser(company);
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to create company! Please try another name.";
        }
            
    // We save into singleton
        TheCompany.name = companyName;
        TheCompany.email = companyEmail;
        TheCompany.address = companyAddress;
        TheCompany.phone = companyPhone;
            
    // We redirect to main page
        await JsRuntime.InvokeVoidAsync("alert", "Company details successfully updated!");
        NavManager.NavigateTo("/");
    }

    private async void UpdateCompany()
    {
        Company company = new Company
        {
            id = TheCompany.id,
            address = companyAddress,
            email = companyEmail,
            name = companyName,
            phone = companyPhone
        };

        try
        {
            _daoFetcher.CompanyDao().UpdateCompany(company);
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to update company!";
        }
            
    // We save into singleton
        TheCompany.name = companyName;
        TheCompany.address = companyAddress;
        TheCompany.phone = companyPhone;
            
    // We redirect to main page
        await JsRuntime.InvokeVoidAsync("alert", "Company details successfully updated!");
        NavManager.NavigateTo("/");
    }

    private async void SaveCompanyInfo()
    {
        if (AllFilled())
        {
            if (CompanyTiedToUser)
            {
                UpdateCompany();
            }
            else
            {
                CreateAndTieToUser();
            }
        }
        else
        {
            Console.WriteLine("Lacking info!");
            ErrorMessage = "Please fill out all of the required information!";
            StateHasChanged();
        }
    }
    
}