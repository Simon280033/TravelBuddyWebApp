@page "/TourManager"
@using Radzen
@using AuthenticationTest.Data.Entities
@using ImageConverter = AuthenticationTest.Data.Converters.Concrete.ImageConverter
@using AuthenticationTest.Data
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<h3>@HeaderText</h3>

<div class="imageDisplayField">
    <div>
        <label >Sight image: </label>
    </div>
    <img width="300" height="300" src="data:image/*;base64,@TheTour.ImageBase64"/>
</div>

<div class="imageUploadField">
    <div>
        <label >Upload image: </label>
    </div>
    <InputFile id="image-picker" OnChange="@UploadImage" accept="image/*"/>
</div>


<div style="color:red">@MissingInfoErrorMessage</div>
<div style="color:red">@VariantAddingMessage</div>
<button @onclick="ToggleLanguageChoiceVisibility" disabled="@disableAddingNewVariants">Add new language variant</button>

<div class="row" hidden="@hideLanguageChoice">
    <div class="col-xl-6">
        <div class="languageChoice">
            <b><label for="languageCodes">Language:</label></b>
            <select id="languageCodes" @onchange="TourLanguageChanged" name="languageCodes">
                @foreach (Language language in Languages)
                {
                    <option>@language.LanguageName</option>
                }
            </select>
        </div>
    </div>
    <div>
        <button type="button" @onclick="() => AddRow()">Add</button>
    </div>
</div>

<div hidden="@hideVariantOverview">
    @for (int i = 0; i < TheTour.Variants.Count; i++)
    {
        int index = i;
        <div style="border: thin solid black">
            <div>Language:</div>
            <div>@TheTour.Variants[index].Language.LanguageName</div>
            <div>Name:</div>
            <input id="nameInput@index" placeholder="Tour name in @TheTour.Variants[index].Language.LanguageName..." @bind-value="@TheTour.Variants[index].TourName"/>
            <div>Description:</div>
            <input id="descInput@index" placeholder="Tour description in @TheTour.Variants[index].Language.LanguageName..." @bind-value="@TheTour.Variants[index].TourDescription"/>
        </div>
        
    <div>
        <button type="button" @onclick="() => RemoveVariant(index)">Remove variant</button>
    </div>
    }
</div>

<button type="button" disabled="@DisableCreatingOrUpdatingTour" @onclick="() => CreateOrUpdateTour()">@CreateOrUpdateButtonText</button>

@code {
    // Converters
    private IImageConverter imageConverter = new ImageConverter();
    
    // Bools for showing/hiding
    private bool hideLanguageChoice = true;
    private bool hideVariantOverview = false;
    private bool disableAddingNewVariants = false;
    private bool DisableCreatingOrUpdatingTour = true;

    private string VariantAddingMessage = "";
    private string MissingInfoErrorMessage = "";
    private string HeaderText;
    private string CreateOrUpdateButtonText;
    private string selectedTourLanguageCode;
    
    // The tour we are working with
    private Tour TheTour = new Tour();
    
    private List<Language> Languages = new List<Language>();

    protected override async Task OnInitializedAsync()
    {
        Languages.Add(new Language
        {
            LanguageCode = "EN",
            LanguageName = "English"
        });
        Languages.Add(new Language
        {
            LanguageCode = "DA",
            LanguageName = "Danish"
        });
        Languages.Add(new Language
        {
            LanguageCode = "DE",
            LanguageName = "Deutsch"
        });

        selectedTourLanguageCode = "EN";
        
        TheTour = new Tour
        {
            Variants = new List<TourVariant>(),
            Id = TheTour.Variants.Count,
            ImageBase64 = "iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAJ1BMVEXt7e3V1dXW1tbm5ubs7Ozg4ODc3NzS0tLw8PDo6OjZ2dnj4+Pe3t5T9WAhAAAEmklEQVR4nO2ciXKsIBBFsQUB9f+/9+EuKjPEpe2X3FOVSTJlAmdaWRpUKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8Pbnh9mr4Uza+nnSpbChTTy0M/hNfKeNeXyIshW/BReaVZ4+h8zSY3lESG008rz+a30LIqFpbYDa1huxC1qovQDHAbUuG5DF3Tl8cmORdTs/Ua9VxuzUHXaA+WnsnQD90EUa1ZPlRtChoMuRobs5w0PLiGphJ5YlgNxVnGHrgeTlOuIkdD4imtx/B+qKNhzThOLF8xJE5D+4ohT2k9MLwZGD4ADG8Ghg8Aw5uB4QPINRxqdH14J9awmyG7summ5tfqJthQO1NY21wtUrKh7zJW9mqWTLLhcPDV9INYQ6XHqhXGXaqcXEM1L2/4S2k5qYbaNfP61LXEnFRDpWhJize/MIbrEAau1E6qoV75FfZKwlqmoVYmWiWmUp1ex5VpqKIQdhdkOG9/l2EcwuDYnu4UZRrq7frihSVOgYahKm2xUzw9eBNoqJy3O8Pi9CRDoqGqhv0+UQzpbKco0bAs9iEMVOeKlGeoVWpH0bnBmzxD5VMbbuhUJQUapkJI9tR5Ks+w+bBnqnRxXqr7razMx30d8gzTu4nI1nE1O8HWfkl0SDN0TXq7lKUwyYgqqrvDw9uftq1JM9RftoP57eF09PYaYYbOpNRG6vUIXLtqrH6bPk+FGX4LYdcpLripVSJbupSjMMNvISyiwZsu5sFdOlsly1Afa8Xn6Xzw9N96geTAXJShazMMi3I4WOsmejtlIMowbws4jRmbOOA2tV1dkGFoGbMMu9O0q24VZzpSSziCDKfttV8iSGOSv9wODRKjVkGGrs7Z/G0b1w/XdDy6Cz/b8rBIQYal3U7sj6j70WhoR+12AEt02CVKMdTpWVNk0TeZ4as5SgM0R8NTIYZDnTMYL7bjjpOO8uJCDFVeCKebX1Kt7tEcQ4xhXgjH/dPJgw96DCmGuyz3MdQ1pc4nj632QRRi+HXWNNJNghvz4cPwO0Uhht9nTeMfhqp+PGCf0BBimBnC8a8/fRzNdpFKhmFuCDOoZcYwa9aUyXZFXIThrTfO0qbHeN1QL+/exKbHeN1QZc6a8tnMMV431GHWdPM9s3W07/Z1Q+XKgxXfS8RZqfcN84bcP4LW6zfvG2YOuX9EGwavk9HrhvqBEEYbNt82/LTWdIFVVuptwweuwp6l23/bUD/zHJfVbsa3Df3nmcJpltP0bcPwziNR9GJaGqUbU91LG1g9BeN9w2v3GiSR0x8+9AAQSWOap4Hhzfx6Q1eNzxdiKU1F6yFshn0ILdPjcPoUCU2GLGVOeVG2p4u5aZWK68Lw/Vkavswdt/jmFDiN7A9WNB5hSf3WhoPpFKXrd9tmCi63irA8sI3mb+f2F58xvDF/n6VIwytXCFW/2Y7zyZ6TJVv3pPpnxPGzW655Ere9a+tpqLAVp2D/BNOa1TG54+1JfMXW4JDhDeCM9r5kwL+k92d4/vNFBAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4Y/wDpoY2HBKwqLIAAAAASUVORK5CYII=",
            CompanyId = 0,
            Sights = null
        };

        if (TheTour.Id == 0)
        {
            CreateOrUpdateButtonText = "Create Tour with language variants";
            HeaderText = "Create new tour";
        }
        else
        {
            CreateOrUpdateButtonText = "Update Tour and language variants";
            HeaderText = "Update tour";
        }
    }

    private Language GetLanguageByCode(string code)
    {
        for (int i = 0; i < Languages.Count; i++)
        {
            if (Languages[i].LanguageCode.Equals(code))
            {
                return Languages[i];
            }
        }

        return new Language
        {
            LanguageCode = "??",
            LanguageName = "Unknown language"
        };
    }

    private void AddRow()
    {
        TheTour.Variants.Add(new TourVariant
        {
            TourName = "",
            Language = GetLanguageByCode(selectedTourLanguageCode),
            TourDescription = ""
        });
        // We remove the available languages from the list
        // If it is the last language, we disable
        if (Languages.Count == 1)
        {
            disableAddingNewVariants = true;
            VariantAddingMessage = "No more languages available to add variants for!";
        }
        else
        {
            for (int i = 0; i < Languages.Count; i++)
            {
                if (Languages[i].LanguageCode.Equals(selectedTourLanguageCode))
                {
                    Languages.Remove(Languages[i]);
                    break;
                }
            }
        }
        selectedTourLanguageCode = Languages[0].LanguageCode;
        hideLanguageChoice = true;
        hideVariantOverview = false;
        DisableCreatingOrUpdatingTour = false;
    }

    private void ToggleLanguageChoiceVisibility()
    {
        hideLanguageChoice = !hideLanguageChoice;
    }
    
    private void ToggleVariantOverviewVisibility()
    {
        hideVariantOverview = !hideVariantOverview;
    }

    private void TourLanguageChanged(ChangeEventArgs e)
    {
        // We set it as the selected
        Language languageChosen = (Language) e.Value;
        selectedTourLanguageCode = languageChosen.LanguageCode;
    }

    private void CreateOrUpdateTour()
    {
        if (!AllFilled())
        {
            MissingInfoErrorMessage = "Please fill out ALL the required information for ALL of the language variants!";
            return;
        }
        else
        {
            MissingInfoErrorMessage = "";
        }
        // If the Tour ID is 0, we are creating
        if (TheTour.Id == 0)
        {
            CreateTour();
        }
        else
        {
            UpdateTour();
        }
    }

    private async void CreateTour()
    {
        await JsRuntime.InvokeVoidAsync("alert", "Tour succesfully created! Navigating to Sight Manager...");
        NavManager.NavigateTo("Counter");
    }

    private void UpdateTour()
    {
        
    }

    private bool AllFilled()
    {
        // We check if all the info is filled out
        // We go through each variant
        for (int i = 0; i < TheTour.Variants.Count; i++)
        {
            TourVariant variant = TheTour.Variants[i];

            if (variant.Language != null)
            {
                if (string.IsNullOrEmpty(variant.Language.LanguageCode))
                {
                    return false;
                }  
                if (string.IsNullOrEmpty(variant.Language.LanguageName))
                {
                    return false;
                }  
            }
            else
            {
                return false;
            }

            if (string.IsNullOrEmpty(variant.TourName))
            {
                return false;
            }
            
            if (string.IsNullOrEmpty(variant.TourDescription))
            {
                return false;
            }
        }
        return true;
    }

    private void RemoveVariant(int index)
    {
        Language ToAdd = TheTour.Variants[index].Language;
        if (!Languages.Contains(ToAdd))
        {
            if (disableAddingNewVariants)
            {
                Languages.Clear();
            }
            Languages.Add(ToAdd);
        }
        disableAddingNewVariants = false;
        VariantAddingMessage = "";
        TheTour.Variants.Remove(TheTour.Variants[index]);
        if (TheTour.Variants.Count == 0)
        {
            DisableCreatingOrUpdatingTour = true;
        }
    }
    
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        TheTour.ImageBase64 = await imageConverter.UploadedFileToBase64(e.File);
    }

}