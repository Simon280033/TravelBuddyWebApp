@page "/"
@using Npgsql
@using System.Data
@using AuthenticationTest.Areas.Identity
@using AuthenticationTest.Data
@using AuthenticationTest.Data.Entities
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDAOFetcher _daoFetcher
@inject AuthenticationStateProvider auth
@inject Company TheCompany
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<h3>Carousel</h3>
<div class="bd-example" style="width:100%; max-width:800px; height:100%; max-height:500px;">
    <div id="carouselExampleCaptions" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carouselExampleCaptions" data-slide-to="0" class="active"></li>
            <li data-target="#carouselExampleCaptions" data-slide-to="1"></li>
            <li data-target="#carouselExampleCaptions" data-slide-to="2"></li>
            <li data-target="#carouselExampleCaptions" data-slide-to="3"></li>
        </ol>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="https://i.ibb.co/8DTZQLH/slide-4.png" class="d-block w-100">
                <div class="carousel-caption d-none d-md-block" style="background-color: black; padding: 15px; opacity: 0.7; border-radius: 10px;">
                    <h5 style="">This guide isn't afraid to go off the beaten path</h5>
                    <p>TravelBuddy can give your visitors guided tours anywhere that has access to the internet!</p>
                </div>
            </div>
            <div class="carousel-item">
                <img src="https://i.ibb.co/yNP8YV6/slide-2.png" class="d-block w-100">
                <div class="carousel-caption d-none d-md-block" style="background-color: black; padding: 15px; opacity: 0.7; border-radius: 10px;">
                    <h5>Roof or no roof</h5>
                    <p>TravelBuddy supports guided tours both indoors and outdoors.</p>
                </div>
            </div>
            <div class="carousel-item">
                <img src="https://i.ibb.co/Jz1nmYs/slide-3.png"  class="d-block w-100">
                <div class="carousel-caption d-none d-md-block" style="background-color: black; padding: 15px; opacity: 0.7; border-radius: 10px;">
                    <h5>Ditch the crowd</h5>
                    <p>TravelBuddy allows users to get a tour in their own tempo - in their own order, which suits them best.</p>
                </div>
            </div>
            <div class="carousel-item">
                <img src="https://i.ibb.co/C94DnF1/slide-1.jpg" class="d-block w-100">
                <div class="carousel-caption d-none d-md-block" style="background-color: black; padding: 15px; opacity: 0.7; border-radius: 10px;">
                    <h5>This guide is awake 24/7</h5>
                    <p>Early morning? Late night? TravelBuddy is always up and running, ready to guide you.</p>
                </div>
            </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleCaptions" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleCaptions" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>

@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("startCarousels");
    }

    protected override async Task OnInitializedAsync()
    {
        ifAuthenticated();
    }

    private async void ifAuthenticated()
    {
        // We check if the user is logged in
        bool isAuthenticated = auth.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            // We check if company details are tied to user
            bool isTied = _daoFetcher.CompanyDao().userTiedToCompany(auth.GetAuthenticationStateAsync().Result.User.Identity.Name);

            if (isTied)
            {
                TheCompany.id = _daoFetcher.CompanyDao().getCompanyForUserById(auth.GetAuthenticationStateAsync().Result.User.Identity.Name).id;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "WELCOME! As this is the first time you are using this tool, please fill out company information.");
                NavManager.NavigateTo("CompanyEditor");
            }
        }
    }
}